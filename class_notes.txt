Day-1
*****
	- Angular is the "Framework"

	- Angular is the "JavaScript" Framework

	- Angular Released by "Google"

	- Current Version of Angular is "Angular13".

	- Angular used to build the "web applications" and "mobile applications"

	- we will build Angular Applications with the help of "TypeScript"

	- TypeScript is the Programming Language

	- TypeScript released by Microsoft.

	- TypeScript follows the OOPS
			
		Ex.
			Inheritance

			Polymorphism

			Encapsulation
		
			Abstraction

			---
			---
			---
	- Superset of JavaScript also called as TypeScript.

	- we will save TypeScript files to with ".ts" extension

	- Browsers can't understand TypeScript

	- So, as Angular Developer we must convert TypeScript to Equalent javascript.

	- Conversion of TypeScript to Equalent JavaScript called as Transpilation

	- "tsc" is the tool used to perform the Transpilation.
	
	- "tsc" stands for TypeScript Compiler.

	- Visual Studio Code is Suggestable IDE to build the TypeScript and Angular Applications.

	- VSCode IDE given by microsoft and open source IDE.

	- TypeScript installation is Command Based Installation

	- TypeScript Installation Dependening on "npm" tool

	- "npm" stands for Node Packaging Manager.

	- "npm" available in NodeJS.

Day-2
*****

Software Installations

1) download and install NodeJS

	NodeJS containes following tools
	
		1) npm

		2) node

		3) npx
	
	npm stands for node packaging manager

	npm is the tool, present in NodeJS

	node is the tool, helps to execute the JavaScript

	npx stands for node pckaging runner
	
	npx creates the environment, to build the React Applications

website : https://nodejs.org/en/download/

file    : node-v16.14.0-x64.msi


2) install TypeScript

		TypeScript is the command based installation

		> npm install -g typescript
	
		where "-g" stands for global installation


3) download and install Visual Studio Code

	website : https://code.visualstudio.com/docs/?dv=win

	file    : VSCodeUserSetup-x64-1.64.2.exe


Transpilation
*************
	- Conversion of TypeScript to Equalent JavaScript called as Transpilation

	- "tsc" is the tool, used to perform Transpilation


Ex.
		> tsc demo.ts
			
			o/p

		demo.js

		> node demo.js


Day-4
*****
Variables


OOPS
****
classes
+++++++
	collection of "Variables" and "functions" called as class

	"Encapsulation" of Variables and functions also called as "class"

	we can create the classes with the help of "class" keyword

	we can create object to the classes by using "new" keyword

	we will define the constructors by using "constructor" keyword

	by default constructors will execute at "booting" time

	typescript supports the following modifiers

	1) public

	2) private

	3) protected

	recomended modifier for functions is "public"

	recomended modifier for Variables is "private"

	we will refer the Current class members with "this" keyword


interfaces
**********

	- when ever we know the declarations, and we dont know implementations then we will choose interfaces

	- we will declare the interfaces by using "interface" keyword

	- implementations known by either "classes" or "json"


modules
*******
	collection of "similar" functionalities called as "module"

	collection of "modules" called as "project"

	"export" and "default" are the keywords, used to to "export" the modules

	"import" is the keyword used to import the modules
























Directory Structure of Angular Application
******************************************
node_modules

	- it containes libraries

	- these libraries helps to execute the angular application

src/app

	- it is used to deploy the components,services,directives,pipes,.......


src/app/app.component.ts 
        app.component.html
		app.component.css
		app.component.spec.ts

			- above files representing default component

			- unit testing files have the ".spec.ts" extension


src/app/app.module.ts

	this file acting as "registration" file

	this file also called as default "module" file

	this file used to register the components,services,directives,pipes,......

	angular Framework executes our application based on "registration" file


src/assets

	it is used to deploy the static resources

	Ex.
		images

		xml files

		json files

		text files

		---
		---
		---	


environments/environment.ts

	- it is used to provide the development related configurations


environments/environment.prod.ts

	- it is used to provide the production related configurations

src/favicon.ico

	- this file representing the default logo of angular

src/index.html

	- angular Framework starts the execution from index.html file

	- this html file we can call main tempalte

src / polyfills.ts

	- in general, we will build angular applications with typescript

	- but, Browsers can't understand TypeScript

	- so, we must convert TypeScript to Equalent JavaScript

	- polyfills.ts file acting as library

	- this library helps to convert TypeScript to Equalent JavaScript


src/main.ts

	this file acting as mediator between app.module.ts and index.html file


src/styles.css

	here, we can define global styles

	these styles applicable to entire angular application


src / test.ts

	this file is default testing file for main.ts file

.browserslist

	this file contain supporting browsers of angular13 application

angular.json

	this file describing the directory Structure of angular application

karma.conf.js

	this file acting as configuration file to write unit test cases

package.json

	this file describing the libraries information

	this file also helps to download the 3rd party libraries


tsconfig.app.json

	this file helps to configure the application level configurations


tsconfig.json

	this file used to configure the TypeScript related information


tsconfig.spec.json

	this file used to configure the unit test cases related information


components
**********
	reusable portion of complex ui called as component

	as a angular developer, we can create more than one component

	as a angular developer we can provide communication between components

	angular follows the MVC Design Pattern

	M - Model

	V - View

	C - Controller / Component

	Variables behaves like model

	HTML,HTML5,Python and PERL Scripting acting as View in MVC

	classes behaves like Components


**************************************
componentEx
          src
		    app
			  first.component.ts
			  first.component.html

			  app.module.ts
			index.html
***************************************


communication between components

we can provide communication between components in 3 ways

1) @Input()

		share data from parent component to child component

2) @Output()

		share the data from child component to parent component

3) @ViewChild()

4) @ViewChildren()

		above two directives used to share the data between "sibiling" components



Steps to implement the @ViewChild Example
*****************************************
1) create the Comp2 with var_one and var_two



2) get the reference of "Comp2" to "Comp1"



3) create the button in Comp1



directives
**********
	directives enhances the view capabilities

	we have two types of directives

	1) predefined directives

	2) custom directives


	directives given by angular Framework called as predefined directives

	directives developed by developer based on application requirement called as custom directives

predefined directives divided into 3 types
******************************************

1) event based directives

2) attribute type directives

3) structural directives


	- event based directives are used to handle the events

		1) click

		2) dblclick

		3) submit

	- we will represent event based directives with "()"

	Ex.
			(click)

			(dblclick)

			(ngSubmit)


	- attribute type directives are the default directives

	- we will represent attribute type directives with "[]"

		[ngStyle]

		[ngClass]

		[ngSwitch]

	- with structural directives we can manipulate the DOM.

	- we will represent structural directives with "*"

	Ex.
			*ngFor

			*ngIf

			---
			---
			---


Auth Guards


1) CanActivate

		- CanActivate is interface in angular Framework

		- CanActivate, used to perform authentication while entering into main routes

2) CanDeactivate

		- CanDeactivate also predefined interface in angular Framework

		- CanDeactivate used to perform the authentication while leaving the main routes


3) CanActivateChild

		- CanActivateChild is the predefined interface

		- CanActivateChild used to perform the authentication while entering into child routes

Ex.
 auth.routes.ts









Step 1.
	create the components

	1) pageone.component.ts
	2) pageone.component.html


	1) master.component.ts
	2) master.component.html



Step 2.
	create the custom module


	customer.component.ts
	customer.component.html

	customer.service.ts

	customer.module.ts


Step 3.
	implement the CanLoad Authentication


	auth.service.ts

Step 4.
	implement the routing

	app.module.ts



State Management
****************
	if application size increses, communication between components are dufficult

	to simplify communication between components we have state management

	we will implement state management with "NgRx" package.

	we will download NgRx package with either "npm" or "yarn" tool


	> yarn add @ngrx/store


=> dispatch

        1) payload

		      type

			  value


=> Action


=> Reducer


=> Initial State


=> State


=> store


=> selector


=> subscribe

		- sending the requests called as dispatch

		- dispatch may contain payload

		- application business logic called as reducer

		- application default output called as initial state

		- application final output called as state

		- store is the place where we can accomidate, state, initial state, and reducer

		- selector receives the state from store and handover to component  (subscribe)

State Management
****************

1) create the angular application

		> ng new ngrx-get-example


2) switch to angular application

		> cd ngrx-get-example

3) download the ngrx libraries

		@ngrx/store

		@ngrx/effects

		> yarn add @ngrx/store @ngrx/effects


4) create the types

		***************************************************
		ngrx-get-example
					   src
					     app
						   types
						   	  customers.types.ts
		***************************************************

		finally following types are ready

		1) CUSTOMERS_LIST

		2) CUSTOMERS_LIST_SUCCESS

		3) CUSTOMERS_LIST_FAIL

5) create the Actions

	******************************************************
	ngrx-get-example
				  src
				    app

					  model
					  	customers.model.ts	

					  actions
					     customers.actions.ts
	*****************************************************

	finally "Customers" model is ready

	finally following actions are ready

			1) customersList

			2) customersListSuccess

			3) customersListFail


6) create the effects

		make the rest api call and handover result to actions

	*******************************************************************
	ngrx-get-example
	               src
				     app
					   services
					     customers.service.ts

					   effects
					   	  customers.effects.ts
	*********************************************************************

		finally "CustomersService" is ready with "getCustomers()" function



























































































































































































